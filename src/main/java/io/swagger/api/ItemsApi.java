/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.56).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Item;
import io.swagger.model.Orders;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-15T11:30:40.071880526Z[GMT]")
@Validated
public interface ItemsApi {

    @Operation(summary = "create an item (used by admin)", description = "", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Null response"),
        
        @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid"),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/items",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createItem(@Parameter(in = ParameterIn.DEFAULT, description = "Send the Item Object", required=true, schema=@Schema()) @Valid @RequestBody Item body
);


    @Operation(summary = "Info for a specific item", description = "", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Item.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid"),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/items/{itemId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Item> getItemById(@Parameter(in = ParameterIn.PATH, description = "The id of the item to retrieve", required=true, schema=@Schema()) @PathVariable("itemId") String itemId
);


    @Operation(summary = "List all items available for purchase", description = "", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A paged array of orders", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Orders.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid"),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/items",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Orders> listItems(@Parameter(in = ParameterIn.QUERY, description = "type of the item HARDWARE,SOFTWARE,STATIONARY,TRAINING,MISC" ,schema=@Schema(allowableValues={ "HARDWARE", "SOFTWARE", "STATIONARY", "TRAINING", "MISC" }
)) @Valid @RequestParam(value = "type", required = false) String type
, @Parameter(in = ParameterIn.QUERY, description = "How many items to return at one time (max 100)" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit
);

}

