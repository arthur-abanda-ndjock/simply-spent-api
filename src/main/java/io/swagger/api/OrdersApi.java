/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.56).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Order;
import io.swagger.model.Orders;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-15T11:30:40.071880526Z[GMT]")
@Validated
public interface OrdersApi {

    @Operation(summary = "Approve a order", description = "", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Approval response", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = Boolean.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid"),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/orders/{orderId}/approve",
        produces = { "text/plain", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Boolean> approveOrders(@Parameter(in = ParameterIn.PATH, description = "The id of the order to retrieve", required=true, schema=@Schema()) @PathVariable("orderId") String orderId
);


    @Operation(summary = "List all orders", description = "", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A paged array of orders", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Orders.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid"),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Orders> listOrders(@Parameter(in = ParameterIn.QUERY, description = "status of the order REQUESTED,APPROVED,DENIED" ,schema=@Schema(allowableValues={ "REQUESTED", "APPROVED", "DENIED" }
)) @Valid @RequestParam(value = "status", required = false) String status
, @Parameter(in = ParameterIn.QUERY, description = "if true returns orders of reportees by name for approval" ,schema=@Schema()) @Valid @RequestParam(value = "reportee", required = false) String reportee
, @Parameter(in = ParameterIn.QUERY, description = "How many items to return at one time (max 100)" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit
);


    @Operation(summary = "Request a order", description = "", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Null response"),
        
        @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid"),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> requestOrder(@Parameter(in = ParameterIn.DEFAULT, description = "Send the Order Object", required=true, schema=@Schema()) @Valid @RequestBody Order body
);


    @Operation(summary = "Info for a specific order", description = "", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication information is missing or invalid"),
        
        @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/orders/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Order> showOrderById(@Parameter(in = ParameterIn.PATH, description = "The id of the order to retrieve", required=true, schema=@Schema()) @PathVariable("orderId") String orderId
);

}

