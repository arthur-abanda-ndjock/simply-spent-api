name: Feature branch

on:
  push:
    branches: ["feature**"]

permissions:
  id-token: write
  actions: read
  contents: read
  security-events: write
  checks: write
  issues: write
  pull-requests: write

jobs:
  build_branch:
    runs-on: ubuntu-latest
    env:
      REPOSITORY_NAME: "digiboard"
      IMAGE_TAG: "latest"

    steps:
      # A- Set up runner
      - name: checkout on the workdir
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: Get node_modules cache
        uses: actions/cache@v3.0.2
        id: node_modules_cache
        with:
          path: "**/node_modules **/next/cache"
          key: ${{ runner.os }}-node_modules_cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules_cache-

      # B- build artifact
      - name: build artifact
        run: mvn -B package
      # C- Generate and publish test report for java artifact
      - name: Publish java test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/target/surefire-reports/*.xml

      # generates coverage-report.md and publishes as checkrun
      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v4.8
        with:
          coverage_results_path: ./arthur-digiboard-backend/target/site/jacoco/jacoco.xml
          coverage_report_name: Coverage
          coverage_report_title: JaCoCo
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 80
          fail_below_threshold: false
          publish_only_summary: false

      # Publish Coverage Job Summary  # Optional
      - name: Add Coverage Job Summary
        run: echo "${{ steps.jacoco_reporter.outputs.coverageSummary }}" >> $GITHUB_STEP_SUMMARY

      # uploads the coverage-report.md artifact  # Optional
      - name: Upload Code Coverage Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-markdown
          path: |
            */coverage-results.md
          retention-days: 1

      - name: Publish Sonarlint Results
        uses: jwgmeligmeyling/spotbugs-github-action@v1.2
        with:
          name: Sonarlint
          title: Sonarlint report
          path: build/reports/sonarlint/*.xml
      - name: Publish Spotbugs Results
        uses: jwgmeligmeyling/spotbugs-github-action@v1.2
        with:
          name: Spotbugs
          path: build/reports/spotbugs/*.xml

      # D- build and scan docker image
      - name: Build and tag docker temp
        run: |
          docker build -t ${{env.REPOSITORY_NAME}}-temp:${{env.IMAGE_TAG}} .

      ## scan docker image for vulnerabilities
      - name: Run Snyk to check Docker image for vulnerabilities
        id: snyk_scan
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{env.REPOSITORY_NAME}}-temp:${{env.IMAGE_TAG}}
          args: --file=Dockerfile --severity-threshold=high

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Snyk Scan Result Check
        if: ${{ steps.snyk_scan.outcome == 'failure' }}
        run: |
          echo "::error file={name},line={line},endLine={endLine},title={title}::{message}"
          exit 1
