name: Main branch workflow

on:
  pull_request: # only pull request
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write # This is required for requesting the JWT
  actions: read
  contents: read
  security-events: write
  checks: write
  issues: write
  pull-requests: write

jobs:
  build_branch:
    runs-on: ubuntu-latest

    steps:
      # A- Set up runner
      - name: checkout on the workdir
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
      - name: Get maven repository cache
        uses: actions/cache@v4
        id: maven_local_repo_cache
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # B- build artifact
      - name: build artifact
        run: mvn clean package

      # C- Generate and publish test report for java artifact
      - name: Publish java test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/target/surefire-reports/*.xml

      # generates coverage-report.md and publishes as checkrun
      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v4.8
        with:
          coverage_results_path: ./target/site/jacoco/jacoco.xml
          coverage_report_name: Coverage
          coverage_report_title: JaCoCo
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 80
          fail_below_threshold: false
          publish_only_summary: false

      # Publish Coverage Job Summary  # Optional
      - name: Add Coverage Job Summary
        run: echo "${{ steps.jacoco_reporter.outputs.coverageSummary }}" >> $GITHUB_STEP_SUMMARY

      # uploads the coverage-report.md artifact  # Optional
      - name: Upload Code Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report-markdown
          path: |
            */coverage-results.md
          retention-days: 1

      - name: Publish Sonarlint Results
        uses: jwgmeligmeyling/spotbugs-github-action@v1.2
        with:
          name: Sonarlint
          title: Sonarlint report
          path: build/reports/sonarlint/*.xml
      - name: Publish Spotbugs Results
        uses: jwgmeligmeyling/spotbugs-github-action@v1.2
        with:
          name: Spotbugs
          path: build/reports/spotbugs/*.xml

      # # C- build and scan docker image
      # - name: Build and tag docker temp
      #   run: |
      #     docker build -t ${{env.REPOSITORY_NAME}}-temp:${{env.IMAGE_TAG}} .

      ## scan docker image for vulnerabilities
      # - name: Run Snyk to check Docker image for vulnerabilities
      #   id: snyk_scan
      #   continue-on-error: true
      #   uses: snyk/actions/docker@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     image: ${{env.REPOSITORY_NAME}}-temp:${{env.IMAGE_TAG}}
      #     args: --file=Dockerfile --severity-threshold=high

      # - name: Upload result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: snyk.sarif

      # - name: Snyk Scan Result Check
      #   if: ${{ steps.snyk_scan.outcome == 'failure' }}
      #   run: |
      #     echo "::error file={name},line={line},endLine={endLine},title={title}::{message}"
      #     exit 1

      # - name: Login to Amazon ECR service
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
      #   with:
      #     mask-password: "true"

      # - name: Push docker image to Amazon ECR
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #   run: |
      #     docker tag ${{env.REPOSITORY_NAME}}-temp:${{ env.IMAGE_TAG}} $REGISTRY/${{env.REPOSITORY_NAME}}:${{env.IMAGE_TAG}}
      #     docker push $REGISTRY/${{env.REPOSITORY_NAME}}:${{env.IMAGE_TAG}}

      # - name: Install kubectl
      #   uses: Azure/setup-kubectl@v3.2
      #   # with:
      #   #   version: "v1.27.0"
      #   id: install

      # - name: Update kube config to set name & region & role
      #   run: aws eks update-kubeconfig --name tf-cluster --region us-east-2

      # - name: update helm dependencies
      #   run: |
      #     cd ./helm-charts/
      #     helm dependency build
      #     cd ..
      #     echo "helm dependencies completed"

      # - name: Deploy application using helm
      #   run: |
      #     helm upgrade --install --wait --timeout 10m0s digiboard-application-chart ./helm-charts/

      # - name: Deploy postgress db
      #   run: |
      #     helm upgrade --install --wait --timeout 5m0s  db-postgres-chart ./helm-charts/db-postgres-chart

      # - name: Deploy artifact on aws eks using helm chart
      #   run: |
      #     helm upgrade --install --wait --timeout 150s  digiboard-chart ./helm-charts/digiboard-chart --kubeconfig ~/.kube/config
